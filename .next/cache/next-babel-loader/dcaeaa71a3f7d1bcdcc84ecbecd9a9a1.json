{"ast":null,"code":"var _jsxFileName = \"/Users/gab/nextjs/components/tabellinelog.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport ResultElem from \"../components/resultelem\";\n\nfunction TabellineLog() {\n  const {\n    0: results,\n    1: setResults\n  } = useState(\"\");\n  const {\n    0: currentquestion,\n    1: setCurrentquestion\n  } = useState([7, 4]);\n  const {\n    0: currentanswer,\n    1: setCurrentanswer\n  } = useState(\"\");\n\n  const handleSubmit = event => {\n    alert(currentanswer); // alert (currentanswer)\n    // let testres=currentquestion[0]*currentquestion[1]\n    // let restest=parseInt(currentanswer,10)\n    // (testres===restest)? setResults(\"RIGHT\"):setResults(\"WRONG\")\n    // setCurrentquestion([Math.floor(Math.random()*10),Math.floor(Math.random()*10)])\n\n    event.preventDefault(); // setResults((prevState)=>{})\n  };\n\n  const handleChange = event => {\n    setCurrentanswer(event.target.value);\n  };\n\n  const displayLog = () => {\n    return (//results.map((r)=>(<ResultElem text={r}/>)\n      results\n    );\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"TABELLINE: \", currentquestion[0], \"X\", currentquestion[1]), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: \"currentanswer\",\n    type: \"text\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"ok\")), __jsx(\"div\", {\n    className: \"tabelline-log\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"xx\", displayLog()));\n}\n\nexport default TabellineLog;","map":{"version":3,"sources":["/Users/gab/nextjs/components/tabellinelog.js"],"names":["useState","ResultElem","TabellineLog","results","setResults","currentquestion","setCurrentquestion","currentanswer","setCurrentanswer","handleSubmit","event","alert","preventDefault","handleChange","target","value","displayLog"],"mappings":";;;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AACA,SAASC,YAAT,GAAwB;AAEpB,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAsBJ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACK,eAAD;AAAA,OAAkBC;AAAlB,MAAsCN,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,CAApD;AACA,QAAM;AAAA,OAACO,aAAD;AAAA,OAAgBC;AAAhB,MAAkCR,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMS,YAAY,GAAEC,KAAD,IAAS;AACxBC,IAAAA,KAAK,CAAEJ,aAAF,CAAL,CADwB,CAExB;AACA;AACA;AACA;AACA;;AACAG,IAAAA,KAAK,CAACE,cAAN,GAPwB,CAQzB;AAEF,GAVD;;AAWA,QAAMC,YAAY,GAAEH,KAAD,IAAS;AACxBF,IAAAA,gBAAgB,CAACE,KAAK,CAACI,MAAN,CAAaC,KAAd,CAAhB;AACH,GAFD;;AAGA,QAAMC,UAAU,GAAG,MAAI;AACnB,WACI;AACAb,MAAAA;AAFJ;AAKH,GAND;;AAOA,SAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBE,eAAe,CAAC,CAAD,CAA/B,OAAqCA,eAAe,CAAC,CAAD,CAApD,CADJ,EAEI;AAAM,IAAA,QAAQ,EAAEI,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,eAAZ;AAA4B,IAAA,IAAI,EAAC,MAAjC;AAAwC,IAAA,QAAQ,EAAEI,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,CAFJ,EAMI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGG,UAAU,EADb,CANJ,CAAR;AAUH;;AAGD,eAAed,YAAf","sourcesContent":["\nimport { useState } from 'react'\nimport ResultElem from \"../components/resultelem\"\nfunction TabellineLog() {\n\n    const [results, setResults]=useState(\"\")\n    const [currentquestion, setCurrentquestion]=useState([7,4])\n    const [currentanswer, setCurrentanswer]=useState(\"\")\n    \n    const handleSubmit=(event)=>{\n        alert (currentanswer)\n        // alert (currentanswer)\n        // let testres=currentquestion[0]*currentquestion[1]\n        // let restest=parseInt(currentanswer,10)\n        // (testres===restest)? setResults(\"RIGHT\"):setResults(\"WRONG\")\n        // setCurrentquestion([Math.floor(Math.random()*10),Math.floor(Math.random()*10)])\n        event.preventDefault()\n       // setResults((prevState)=>{})\n\n    } \n    const handleChange=(event)=>{\n        setCurrentanswer(event.target.value)\n    }\n    const displayLog = ()=>{\n        return(\n            //results.map((r)=>(<ResultElem text={r}/>)\n            results\n            \n        )\n    }   \n    return (<div>\n                <h1>TABELLINE: {currentquestion[0]}X{currentquestion[1]}</h1>\n                <form onSubmit={handleSubmit}>\n                    <input name=\"currentanswer\" type=\"text\" onChange={handleChange}/>\n                    <button>ok</button>\n                 </form>\n                <div className=\"tabelline-log\">\n                xx{displayLog()}\n                </div>\n            </div>)\n}\n\n\nexport default TabellineLog\n"]},"metadata":{},"sourceType":"module"}