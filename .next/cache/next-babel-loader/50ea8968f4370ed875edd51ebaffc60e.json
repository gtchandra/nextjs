{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar _jsxFileName = \"/Users/gab/nextjs/components/tabellinelog.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport ResultElem from \"../components/resultelem\";\n\nfunction TabellineLog() {\n  const {\n    0: results,\n    1: setResults\n  } = useState(\"\");\n  const {\n    0: currentquestion,\n    1: setCurrentquestion\n  } = useState([7, 4]);\n  const {\n    0: currentanswer,\n    1: setCurrentanswer\n  } = useState(\"\");\n\n  const handleSubmit = event => {\n    if (currentquestion[0] * currentquestion[1] === currentanswer) {\n      setResults(\"RIGHT\");\n    } else {\n      setResults(\"WRONG\");\n    }\n\n    setCurrentquestion([Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)]);\n    event.preventDefault(); // setResults((prevState)=>{})\n  };\n\n  useEffect(() => {\n    //const testres=currentquestion[0]*currentquestion[1]\n    //((testres===currentanswer)? setResults(\"RIGHT\") : setResults(\"WRONG\")\n    if (currentquestion[0] * currentquestion[1] === currentanswer) {\n      setResults(\"wedfkjfhdskjfhsdkjhfsd\");\n    } else {\n      setResults(\"WRONG\");\n    }\n  }, [currentanswer]);\n\n  const handleChange = event => {\n    setCurrentanswer(_parseInt(event.target.value, 10));\n  };\n\n  const displayLog = () => {\n    return (//results.map((r)=>(<ResultElem text={r}/>)\n      results\n    );\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"TABELLINE: \", currentquestion[0], \"X\", currentquestion[1]), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: \"currentanswer\",\n    type: \"text\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"ok\")), __jsx(\"div\", {\n    className: \"tabelline-log\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"xx\", displayLog()));\n}\n\nexport default TabellineLog;","map":{"version":3,"sources":["/Users/gab/nextjs/components/tabellinelog.js"],"names":["useState","useEffect","ResultElem","TabellineLog","results","setResults","currentquestion","setCurrentquestion","currentanswer","setCurrentanswer","handleSubmit","event","Math","floor","random","preventDefault","handleChange","target","value","displayLog"],"mappings":";;;;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AACA,SAASC,YAAT,GAAwB;AAEpB,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAsBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACM,eAAD;AAAA,OAAkBC;AAAlB,MAAsCP,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,CAApD;AACA,QAAM;AAAA,OAACQ,aAAD;AAAA,OAAgBC;AAAhB,MAAkCT,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMU,YAAY,GAAEC,KAAD,IAAS;AACxB,QAAKL,eAAe,CAAC,CAAD,CAAf,GAAmBA,eAAe,CAAC,CAAD,CAAnC,KAA0CE,aAA9C,EAA6D;AACzDH,MAAAA,UAAU,CAAC,OAAD,CAAV;AACH,KAFD,MAGK;AACDA,MAAAA,UAAU,CAAC,OAAD,CAAV;AACH;;AACDE,IAAAA,kBAAkB,CAAC,CAACK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAAD,EAA8BF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAA9B,CAAD,CAAlB;AACAH,IAAAA,KAAK,CAACI,cAAN,GARwB,CAUzB;AAEF,GAZD;;AAaJd,EAAAA,SAAS,CAAE,MAAI;AACX;AACA;AACA,QAAKK,eAAe,CAAC,CAAD,CAAf,GAAmBA,eAAe,CAAC,CAAD,CAAnC,KAA0CE,aAA9C,EAA6D;AACzDH,MAAAA,UAAU,CAAC,wBAAD,CAAV;AACH,KAFD,MAGK;AACDA,MAAAA,UAAU,CAAC,OAAD,CAAV;AACH;AACA,GATI,EASH,CAACG,aAAD,CATG,CAAT;;AAWI,QAAMQ,YAAY,GAAEL,KAAD,IAAS;AACxBF,IAAAA,gBAAgB,CAAC,UAASE,KAAK,CAACM,MAAN,CAAaC,KAAtB,EAA4B,EAA5B,CAAD,CAAhB;AACH,GAFD;;AAGA,QAAMC,UAAU,GAAG,MAAI;AACnB,WAEI;AACAf,MAAAA;AAHJ;AAMH,GAPD;;AAQA,SAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBE,eAAe,CAAC,CAAD,CAA/B,OAAqCA,eAAe,CAAC,CAAD,CAApD,CADJ,EAEI;AAAM,IAAA,QAAQ,EAAEI,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,eAAZ;AAA4B,IAAA,IAAI,EAAC,MAAjC;AAAwC,IAAA,QAAQ,EAAEM,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,CAFJ,EAMI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGG,UAAU,EADb,CANJ,CAAR;AAUH;;AAGD,eAAehB,YAAf","sourcesContent":["\nimport { useState, useEffect } from 'react'\nimport ResultElem from \"../components/resultelem\"\nfunction TabellineLog() {\n\n    const [results, setResults]=useState(\"\")\n    const [currentquestion, setCurrentquestion]=useState([7,4])\n    const [currentanswer, setCurrentanswer]=useState(\"\")\n    \n    const handleSubmit=(event)=>{ \n        if ((currentquestion[0]*currentquestion[1])===currentanswer) {\n            setResults(\"RIGHT\")\n        }\n        else {\n            setResults(\"WRONG\")\n        }\n        setCurrentquestion([Math.floor(Math.random()*10),Math.floor(Math.random()*10)])\n        event.preventDefault()\n\n       // setResults((prevState)=>{})\n\n    } \nuseEffect (()=>{\n    //const testres=currentquestion[0]*currentquestion[1]\n    //((testres===currentanswer)? setResults(\"RIGHT\") : setResults(\"WRONG\")\n    if ((currentquestion[0]*currentquestion[1])===currentanswer) {\n        setResults(\"wedfkjfhdskjfhsdkjhfsd\")\n    }\n    else {\n        setResults(\"WRONG\")\n    }\n    },[currentanswer])\n\n    const handleChange=(event)=>{\n        setCurrentanswer(parseInt(event.target.value,10))\n    }\n    const displayLog = ()=>{\n        return(\n            \n            //results.map((r)=>(<ResultElem text={r}/>)\n            results\n            \n        )\n    }   \n    return (<div>\n                <h1>TABELLINE: {currentquestion[0]}X{currentquestion[1]}</h1>\n                <form onSubmit={handleSubmit}>\n                    <input name=\"currentanswer\" type=\"text\" onChange={handleChange}/>\n                    <button>ok</button>\n                 </form>\n                <div className=\"tabelline-log\">\n                xx{displayLog()}\n                </div>\n            </div>)\n}\n\n\nexport default TabellineLog\n"]},"metadata":{},"sourceType":"module"}