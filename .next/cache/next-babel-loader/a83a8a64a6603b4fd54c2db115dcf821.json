{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar _jsxFileName = \"/Users/gab/nextjs/components/tabellinelog.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport ResultElem from \"../components/resultelem\";\n\nfunction TabellineLog() {\n  const {\n    0: results,\n    1: setResults\n  } = useState([]);\n  const {\n    0: currentquestion,\n    1: setCurrentquestion\n  } = useState([2 + Math.floor(Math.random() * 8), 2 + Math.floor(Math.random() * 8)]);\n  const {\n    0: currentanswer,\n    1: setCurrentanswer\n  } = useState(\"\");\n\n  const handleSubmit = event => {\n    setCurrentquestion([2 + Math.floor(Math.random() * 8), 2 + Math.floor(Math.random() * 8)]);\n    event.preventDefault();\n    setCurrentanswer('');\n    addResults();\n  };\n\n  const addResults = () => {\n    let a = currentquestion[0];\n    let b = currentquestion[1];\n\n    if (a * b === currentanswer) {\n      setResults(prevState => [{\n        text: `${a}x${b}=${currentanswer}`,\n        ok: true\n      }, ...prevState]);\n    } else {\n      setResults(prevState => [{\n        text: `${a}x${b}=${currentanswer}`,\n        ok: false\n      }, ...prevState]);\n    }\n  }; // useEffect (()=>{\n  //     },[currentanswer])\n\n\n  const handleChange = event => {\n    setCurrentanswer(_parseInt(event.target.value, 10));\n  };\n\n  const displayLog = () => results.map(r => __jsx(ResultElem, {\n    text: r.text,\n    ok: r.ok,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }));\n\n  return __jsx(\"div\", {\n    className: \"tabelline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"TABELLINE: \", currentquestion[0], \"X\", currentquestion[1]), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(\"form\", {\n    autocomplete: \"off\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    className: \"tabelline\",\n    autofocus: true,\n    name: \"currentanswer\",\n    value: currentanswer,\n    type: \"number\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"ok\")), __jsx(\"div\", {\n    className: \"tabelline-log\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, displayLog()));\n}\n\nexport default TabellineLog;","map":{"version":3,"sources":["/Users/gab/nextjs/components/tabellinelog.js"],"names":["useState","useEffect","ResultElem","TabellineLog","results","setResults","currentquestion","setCurrentquestion","Math","floor","random","currentanswer","setCurrentanswer","handleSubmit","event","preventDefault","addResults","a","b","prevState","text","ok","handleChange","target","value","displayLog","map","r"],"mappings":"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","sourcesContent":["\nimport { useState, useEffect } from 'react'\nimport ResultElem from \"../components/resultelem\"\nfunction TabellineLog() {\n\n    const [results, setResults]=useState([])\n    const [currentquestion, setCurrentquestion]=useState([2+Math.floor(Math.random()*8),2+Math.floor(Math.random()*8)])\n    const [currentanswer, setCurrentanswer]=useState(\"\")\n    \n    const handleSubmit=(event)=>{ \n        \n        setCurrentquestion([2+Math.floor(Math.random()*8),2+Math.floor(Math.random()*8)])\n        event.preventDefault()\n        setCurrentanswer('')\n        addResults()\n    } \n    const addResults=()=>{\n        let a=currentquestion[0] \n        let b=currentquestion[1] \n       \n        if ((a*b)===currentanswer) {\n            setResults((prevState)=>([{text:`${a}x${b}=${currentanswer}`,ok:true},...prevState]))\n        }\n        else {\n            setResults((prevState)=>([{text:`${a}x${b}=${currentanswer}`,ok:false},...prevState]))\n        }\n\n    }\n// useEffect (()=>{\n\n \n//     },[currentanswer])\n\n    const handleChange=(event)=>{\n        setCurrentanswer(parseInt(event.target.value,10))\n    }\n    const displayLog = ()=>results.map((r)=>(<ResultElem text={r.text} ok={r.ok} />))\n    \n    return (<div className=\"tabelline\">\n                <span>TABELLINE: {currentquestion[0]}X{currentquestion[1]}</span><br/>\n                <form autocomplete=\"off\"  onSubmit={handleSubmit}>\n                    <input className=\"tabelline\" autofocus name=\"currentanswer\"  value={currentanswer} type=\"number\" onChange={handleChange}/>\n                    <button>ok</button>\n                 </form>\n                <div className=\"tabelline-log\">\n                  {displayLog()}\n                </div>\n            </div>)\n}\n\n\nexport default TabellineLog\n"]},"metadata":{},"sourceType":"module"}