{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar _jsxFileName = \"/Users/gab/nextjs/components/tabellinelog.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport ResultElem from \"../components/resultelem\";\n\nfunction TabellineLog() {\n  var _useState = useState(\"\"),\n      results = _useState[0],\n      setResults = _useState[1];\n\n  var _useState2 = useState([7, 4]),\n      currentquestion = _useState2[0],\n      setCurrentquestion = _useState2[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    {\n      name, value;\n    }\n    EventTarget;\n    alert(name);\n    alert(currentanswer);\n    var testres = currentquestion[0] * currentquestion[1];\n    var restest = _parseInt(currentanswer)(testres === restest) ? setResults(\"RIGHT\") : setResults(\"WRONG\");\n    setCurrentquestion([Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)]);\n    event.preventDefault(); // setResults((prevState)=>{})\n  };\n\n  var displayLog = function displayLog() {\n    return (//results.map((r)=>(<ResultElem text={r}/>)\n      results\n    );\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"TABELLINE: \", currentquestion[0], \"X\", currentquestion[1]), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: \"currentanswer\",\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"ok\")), __jsx(\"div\", {\n    className: \"tabelline-log\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"xx\", displayLog()));\n}\n\nexport default TabellineLog;","map":{"version":3,"sources":["/Users/gab/nextjs/components/tabellinelog.js"],"names":["useState","ResultElem","TabellineLog","results","setResults","currentquestion","setCurrentquestion","handleSubmit","event","name","value","EventTarget","alert","currentanswer","testres","restest","Math","floor","random","preventDefault","displayLog"],"mappings":";;;;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AACA,SAASC,YAAT,GAAwB;AAAA,kBAEQF,QAAQ,CAAC,EAAD,CAFhB;AAAA,MAEbG,OAFa;AAAA,MAEJC,UAFI;;AAAA,mBAGwBJ,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,CAHhC;AAAA,MAGbK,eAHa;AAAA,MAGIC,kBAHJ;;AAKpB,MAAMC,YAAY,GAAC,SAAbA,YAAa,CAACC,KAAD,EAAS;AACxB;AAACC,MAAAA,IAAI,EAACC,KAAL;AAAW;AAACC,IAAAA,WAAW;AACxBC,IAAAA,KAAK,CAAEH,IAAF,CAAL;AACAG,IAAAA,KAAK,CAAEC,aAAF,CAAL;AACA,QAAIC,OAAO,GAACT,eAAe,CAAC,CAAD,CAAf,GAAmBA,eAAe,CAAC,CAAD,CAA9C;AACA,QAAIU,OAAO,GAAC,UAASF,aAAT,EACXC,OAAO,KAAGC,OADC,IACSX,UAAU,CAAC,OAAD,CADnB,GAC6BA,UAAU,CAAC,OAAD,CADnD;AAEAE,IAAAA,kBAAkB,CAAC,CAACU,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAAD,EAA8BF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAA9B,CAAD,CAAlB;AACAV,IAAAA,KAAK,CAACW,cAAN,GARwB,CASzB;AAEF,GAXD;;AAYA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAI;AACnB,WACI;AACAjB,MAAAA;AAFJ;AAKH,GAND;;AAOA,SAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBE,eAAe,CAAC,CAAD,CAA/B,OAAqCA,eAAe,CAAC,CAAD,CAApD,CADJ,EAEI;AAAM,IAAA,QAAQ,EAAEE,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,eAAZ;AAA4B,IAAA,IAAI,EAAC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,CAFJ,EAMI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGa,UAAU,EADb,CANJ,CAAR;AAUH;;AAGD,eAAelB,YAAf","sourcesContent":["\nimport { useState } from 'react'\nimport ResultElem from \"../components/resultelem\"\nfunction TabellineLog() {\n\n    const [results, setResults]=useState(\"\")\n    const [currentquestion, setCurrentquestion]=useState([7,4])\n\n    const handleSubmit=(event)=>{\n        {name,value} EventTarget\n        alert (name)\n        alert (currentanswer)\n        let testres=currentquestion[0]*currentquestion[1]\n        let restest=parseInt(currentanswer)\n        (testres===restest)? setResults(\"RIGHT\"):setResults(\"WRONG\")\n        setCurrentquestion([Math.floor(Math.random()*10),Math.floor(Math.random()*10)])\n        event.preventDefault()\n       // setResults((prevState)=>{})\n\n    } \n    const displayLog = ()=>{\n        return(\n            //results.map((r)=>(<ResultElem text={r}/>)\n            results\n            \n        )\n    }   \n    return (<div>\n                <h1>TABELLINE: {currentquestion[0]}X{currentquestion[1]}</h1>\n                <form onSubmit={handleSubmit}>\n                    <input name=\"currentanswer\" type=\"text\"/>\n                    <button>ok</button>\n                 </form>\n                <div className=\"tabelline-log\">\n                xx{displayLog()}\n                </div>\n            </div>)\n}\n\n\nexport default TabellineLog\n"]},"metadata":{},"sourceType":"module"}