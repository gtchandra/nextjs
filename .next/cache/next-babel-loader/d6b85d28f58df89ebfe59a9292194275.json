{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/gab/nextjs/components/tabellinelog.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport ResultElem from \"../components/resultelem\";\n\nfunction TabellineLog() {\n  const {\n    0: results,\n    1: setResults\n  } = useState({});\n  const {\n    0: currentquestion,\n    1: setCurrentquestion\n  } = useState([7, 4]);\n  const {\n    0: currentanswer,\n    1: setCurrentanswer\n  } = useState(\"\");\n\n  const handleSubmit = event => {\n    setCurrentquestion([Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)]);\n    event.preventDefault();\n    setCurrentanswer('');\n    addResults();\n  };\n\n  const addResults = () => {\n    let a = currentquestion[0];\n    let b = currentquestion[1];\n\n    if (a * b === currentanswer) {\n      setResults(prevState => _objectSpread({}, prevState, {\n        text: `${a}x${b}=${currentanswer} right`,\n        ok: true\n      }));\n    } else {\n      setResults(prevState => _objectSpread({}, prevState, {\n        text: `${a}x${b}=${currentanswer} wrong`,\n        ok: false\n      }));\n    }\n\n    alert(results.ok);\n  }; // useEffect (()=>{\n  //     },[currentanswer])\n\n\n  const handleChange = event => {\n    setCurrentanswer(_parseInt(event.target.value, 10));\n  }; //const displayLog = ()=>results.map((r)=>(<ResultElem text={r.text} ok={r.ok} />))\n\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"TABELLINE: \", currentquestion[0], \"X\", currentquestion[1]), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: \"currentanswer\",\n    value: currentanswer,\n    type: \"text\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"ok\")));\n}\n\nexport default TabellineLog;","map":{"version":3,"sources":["/Users/gab/nextjs/components/tabellinelog.js"],"names":["useState","useEffect","ResultElem","TabellineLog","results","setResults","currentquestion","setCurrentquestion","currentanswer","setCurrentanswer","handleSubmit","event","Math","floor","random","preventDefault","addResults","a","b","prevState","text","ok","alert","handleChange","target","value"],"mappings":";;;;;;;;;;;;;;;;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AACA,SAASC,YAAT,GAAwB;AAEpB,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAsBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACM,eAAD;AAAA,OAAkBC;AAAlB,MAAsCP,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,CAApD;AACA,QAAM;AAAA,OAACQ,aAAD;AAAA,OAAgBC;AAAhB,MAAkCT,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMU,YAAY,GAAEC,KAAD,IAAS;AAExBJ,IAAAA,kBAAkB,CAAC,CAACK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAAD,EAA8BF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAA9B,CAAD,CAAlB;AACAH,IAAAA,KAAK,CAACI,cAAN;AACAN,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACAO,IAAAA,UAAU;AACb,GAND;;AAOA,QAAMA,UAAU,GAAC,MAAI;AACjB,QAAIC,CAAC,GAACX,eAAe,CAAC,CAAD,CAArB;AACA,QAAIY,CAAC,GAACZ,eAAe,CAAC,CAAD,CAArB;;AAEA,QAAKW,CAAC,GAACC,CAAH,KAAQV,aAAZ,EAA2B;AACvBH,MAAAA,UAAU,CAAEc,SAAD,sBAAkBA,SAAlB;AAA4BC,QAAAA,IAAI,EAAE,GAAEH,CAAE,IAAGC,CAAE,IAAGV,aAAc,QAA5D;AAAoEa,QAAAA,EAAE,EAAC;AAAvE,QAAD,CAAV;AACH,KAFD,MAGK;AACDhB,MAAAA,UAAU,CAAEc,SAAD,sBAAkBA,SAAlB;AAA4BC,QAAAA,IAAI,EAAE,GAAEH,CAAE,IAAGC,CAAE,IAAGV,aAAc,QAA5D;AAAoEa,QAAAA,EAAE,EAAC;AAAvE,QAAD,CAAV;AACH;;AACLC,IAAAA,KAAK,CAAElB,OAAO,CAACiB,EAAV,CAAL;AACC,GAXD,CAboB,CAyBxB;AAGA;;;AAEI,QAAME,YAAY,GAAEZ,KAAD,IAAS;AACxBF,IAAAA,gBAAgB,CAAC,UAASE,KAAK,CAACa,MAAN,CAAaC,KAAtB,EAA4B,EAA5B,CAAD,CAAhB;AACH,GAFD,CA9BoB,CAiCpB;;;AAEA,SAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBnB,eAAe,CAAC,CAAD,CAA/B,OAAqCA,eAAe,CAAC,CAAD,CAApD,CADJ,EAEI;AAAM,IAAA,QAAQ,EAAEI,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,eAAZ;AAA4B,IAAA,KAAK,EAAEF,aAAnC;AAAkD,IAAA,IAAI,EAAC,MAAvD;AAA8D,IAAA,QAAQ,EAAEe,YAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,CAFJ,CAAR;AAUH;;AAGD,eAAepB,YAAf","sourcesContent":["\nimport { useState, useEffect } from 'react'\nimport ResultElem from \"../components/resultelem\"\nfunction TabellineLog() {\n\n    const [results, setResults]=useState({})\n    const [currentquestion, setCurrentquestion]=useState([7,4])\n    const [currentanswer, setCurrentanswer]=useState(\"\")\n    \n    const handleSubmit=(event)=>{ \n        \n        setCurrentquestion([Math.floor(Math.random()*10),Math.floor(Math.random()*10)])\n        event.preventDefault()\n        setCurrentanswer('')\n        addResults()\n    } \n    const addResults=()=>{\n        let a=currentquestion[0] \n        let b=currentquestion[1] \n       \n        if ((a*b)===currentanswer) {\n            setResults((prevState)=>({...prevState,text:`${a}x${b}=${currentanswer} right`,ok:true}))\n        }\n        else {\n            setResults((prevState)=>({...prevState,text:`${a}x${b}=${currentanswer} wrong`,ok:false}))\n        }\n    alert (results.ok)\n    }\n// useEffect (()=>{\n\n \n//     },[currentanswer])\n\n    const handleChange=(event)=>{\n        setCurrentanswer(parseInt(event.target.value,10))\n    }\n    //const displayLog = ()=>results.map((r)=>(<ResultElem text={r.text} ok={r.ok} />))\n    \n    return (<div>\n                <h1>TABELLINE: {currentquestion[0]}X{currentquestion[1]}</h1>\n                <form onSubmit={handleSubmit}>\n                    <input name=\"currentanswer\" value={currentanswer} type=\"text\" onChange={handleChange}/>\n                    <button>ok</button>\n                 </form>\n                {/* <div className=\"tabelline-log\">\n                  {displayLog()}\n                </div> */}\n            </div>)\n}\n\n\nexport default TabellineLog\n"]},"metadata":{},"sourceType":"module"}