{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/gab/nextjs/pages/tabelline.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/MyLayout\";\nimport { useState, useEffect } from 'react';\nimport ResultElem from \"../components/resultelem\";\n\nfunction TabellineApp() {\n  var _useState = useState([]),\n      results = _useState[0],\n      setResults = _useState[1];\n\n  var _useState2 = useState([2 + Math.floor(Math.random() * 8), 2 + Math.floor(Math.random() * 8)]),\n      currentquestion = _useState2[0],\n      setCurrentquestion = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      currentanswer = _useState3[0],\n      setCurrentanswer = _useState3[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    setCurrentquestion([2 + Math.floor(Math.random() * 8), 2 + Math.floor(Math.random() * 8)]);\n    event.preventDefault();\n    setCurrentanswer('');\n    addResults();\n  };\n\n  var addResults = function addResults() {\n    var a = currentquestion[0];\n    var b = currentquestion[1];\n\n    if (a * b === currentanswer) {\n      setResults(function (prevState) {\n        return [{\n          text: \"\".concat(a, \"x\").concat(b, \"=\").concat(currentanswer),\n          ok: true\n        }].concat(_toConsumableArray(prevState));\n      });\n    } else {\n      setResults(function (prevState) {\n        return [{\n          text: \"\".concat(a, \"x\").concat(b, \"=\").concat(currentanswer),\n          ok: false\n        }].concat(_toConsumableArray(prevState));\n      });\n    }\n  }; // useEffect (()=>{\n  //     },[currentanswer])\n\n\n  var handleChange = function handleChange(event) {\n    setCurrentanswer(_parseInt(event.target.value, 10));\n  };\n\n  var displayLog = function displayLog() {\n    return results.map(function (r) {\n      return __jsx(ResultElem, {\n        text: r.text,\n        ok: r.ok,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      });\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: \"tabelline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Risovi: \", currentquestion[0], \"X\", currentquestion[1]), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(\"form\", {\n    autocomplete: \"off\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    className: \"tabelline\",\n    autofocus: true,\n    name: \"currentanswer\",\n    value: currentanswer,\n    type: \"number\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"ok\")), __jsx(\"div\", {\n    className: \"tabelline-log\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, displayLog()));\n}\n\nexport default function Tabelline() {\n  return __jsx(Layout, {\n    content: __jsx(TabellineApp, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/Users/gab/nextjs/pages/tabelline.js"],"names":["Layout","useState","useEffect","ResultElem","TabellineApp","results","setResults","Math","floor","random","currentquestion","setCurrentquestion","currentanswer","setCurrentanswer","handleSubmit","event","preventDefault","addResults","a","b","prevState","text","ok","handleChange","target","value","displayLog","map","r","Tabelline"],"mappings":"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","sourcesContent":["import Layout from \"../components/MyLayout\"\nimport { useState, useEffect } from 'react'\nimport ResultElem from \"../components/resultelem\"\nfunction TabellineApp() {\n\n    const [results, setResults]=useState([])\n    const [currentquestion, setCurrentquestion]=useState([2+Math.floor(Math.random()*8),2+Math.floor(Math.random()*8)])\n    const [currentanswer, setCurrentanswer]=useState(\"\")\n    \n    const handleSubmit=(event)=>{ \n        \n        setCurrentquestion([2+Math.floor(Math.random()*8),2+Math.floor(Math.random()*8)])\n        event.preventDefault()\n        setCurrentanswer('')\n        addResults()\n    } \n    const addResults=()=>{\n        let a=currentquestion[0] \n        let b=currentquestion[1] \n       \n        if ((a*b)===currentanswer) {\n            setResults((prevState)=>([{text:`${a}x${b}=${currentanswer}`,ok:true},...prevState]))\n        }\n        else {\n            setResults((prevState)=>([{text:`${a}x${b}=${currentanswer}`,ok:false},...prevState]))\n        }\n\n    }\n// useEffect (()=>{\n\n \n//     },[currentanswer])\n\n    const handleChange=(event)=>{\n        setCurrentanswer(parseInt(event.target.value,10))\n    }\n    const displayLog = ()=>results.map((r)=>(<ResultElem text={r.text} ok={r.ok} />))\n    \n    return (<div className=\"tabelline\">\n                <span>Risovi: {currentquestion[0]}X{currentquestion[1]}</span><br/><br/>\n                <form autocomplete=\"off\"  onSubmit={handleSubmit}>\n                    <input className=\"tabelline\" autofocus name=\"currentanswer\"  value={currentanswer} type=\"number\" onChange={handleChange}/>\n                    <button>ok</button>\n                 </form>\n                <div className=\"tabelline-log\">\n                  {displayLog()}\n                </div>\n            </div>)\n}\n\nexport default function Tabelline() {\n    return (<Layout content=<TabellineApp/> />)\n} \n"]},"metadata":{},"sourceType":"module"}