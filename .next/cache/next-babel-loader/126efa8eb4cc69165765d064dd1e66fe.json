{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar _jsxFileName = \"/Users/gab/nextjs/components/tabellinelog.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport ResultElem from \"../components/resultelem\";\n\nfunction TabellineLog() {\n  var _useState = useState([]),\n      results = _useState[0],\n      setResults = _useState[1];\n\n  var _useState2 = useState([7, 4]),\n      currentquestion = _useState2[0],\n      setCurrentquestion = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      currentanswer = _useState3[0],\n      setCurrentanswer = _useState3[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    setCurrentquestion([Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)]);\n    event.preventDefault();\n    addResults;\n  };\n\n  var addResults = function addResults() {\n    if (currentquestion[0] * currentquestion[1] === currentanswer) {\n      setResults(function (prevState) {\n        return prevState.results.append('right');\n      });\n    } else {\n      setResults(function (prevState) {\n        return prevState.results.append('wrong');\n      });\n    }\n  };\n\n  useEffect(function () {//const testres=currentquestion[0]*currentquestion[1]\n    //((testres===currentanswer)? setResults(\"RIGHT\") : setResults(\"WRONG\")\n  }, [currentanswer]);\n\n  var handleChange = function handleChange(event) {\n    setCurrentanswer(_parseInt(event.target.value, 10));\n  };\n\n  var displayLog = function displayLog() {\n    return results.map(function (r) {\n      return __jsx(ResultElem, {\n        text: r,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      });\n    });\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"TABELLINE: \", currentquestion[0], \"X\", currentquestion[1]), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: \"currentanswer\",\n    type: \"text\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"ok\")), __jsx(\"div\", {\n    className: \"tabelline-log\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"xx\", displayLog()));\n}\n\nexport default TabellineLog;","map":{"version":3,"sources":["/Users/gab/nextjs/components/tabellinelog.js"],"names":["useState","useEffect","ResultElem","TabellineLog","results","setResults","currentquestion","setCurrentquestion","currentanswer","setCurrentanswer","handleSubmit","event","Math","floor","random","preventDefault","addResults","prevState","append","handleChange","target","value","displayLog","map","r"],"mappings":";;;;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AACA,SAASC,YAAT,GAAwB;AAAA,kBAEQH,QAAQ,CAAC,EAAD,CAFhB;AAAA,MAEbI,OAFa;AAAA,MAEJC,UAFI;;AAAA,mBAGwBL,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,CAHhC;AAAA,MAGbM,eAHa;AAAA,MAGIC,kBAHJ;;AAAA,mBAIoBP,QAAQ,CAAC,EAAD,CAJ5B;AAAA,MAIbQ,aAJa;AAAA,MAIEC,gBAJF;;AAMpB,MAAMC,YAAY,GAAC,SAAbA,YAAa,CAACC,KAAD,EAAS;AAExBJ,IAAAA,kBAAkB,CAAC,CAACK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAAD,EAA8BF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAA9B,CAAD,CAAlB;AACAH,IAAAA,KAAK,CAACI,cAAN;AACAC,IAAAA,UAAU;AACb,GALD;;AAMA,MAAMA,UAAU,GAAC,SAAXA,UAAW,GAAI;AACjB,QAAKV,eAAe,CAAC,CAAD,CAAf,GAAmBA,eAAe,CAAC,CAAD,CAAnC,KAA0CE,aAA9C,EAA6D;AACzDH,MAAAA,UAAU,CAAC,UAACY,SAAD;AAAA,eAAaA,SAAS,CAACb,OAAV,CAAkBc,MAAlB,CAAyB,OAAzB,CAAb;AAAA,OAAD,CAAV;AACH,KAFD,MAGK;AACDb,MAAAA,UAAU,CAAC,UAACY,SAAD;AAAA,eAAaA,SAAS,CAACb,OAAV,CAAkBc,MAAlB,CAAyB,OAAzB,CAAb;AAAA,OAAD,CAAV;AACH;AAEJ,GARD;;AASJjB,EAAAA,SAAS,CAAE,YAAI,CACX;AACA;AAEC,GAJI,EAIH,CAACO,aAAD,CAJG,CAAT;;AAMI,MAAMW,YAAY,GAAC,SAAbA,YAAa,CAACR,KAAD,EAAS;AACxBF,IAAAA,gBAAgB,CAAC,UAASE,KAAK,CAACS,MAAN,CAAaC,KAAtB,EAA4B,EAA5B,CAAD,CAAhB;AACH,GAFD;;AAGA,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,WAAIlB,OAAO,CAACmB,GAAR,CAAY,UAACC,CAAD;AAAA,aAAM,MAAC,UAAD;AAAY,QAAA,IAAI,EAAEA,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAN;AAAA,KAAZ,CAAJ;AAAA,GAAnB;;AAEA,SAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBlB,eAAe,CAAC,CAAD,CAA/B,OAAqCA,eAAe,CAAC,CAAD,CAApD,CADJ,EAEI;AAAM,IAAA,QAAQ,EAAEI,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,eAAZ;AAA4B,IAAA,IAAI,EAAC,MAAjC;AAAwC,IAAA,QAAQ,EAAES,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,CAFJ,EAMI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGG,UAAU,EADb,CANJ,CAAR;AAUH;;AAGD,eAAenB,YAAf","sourcesContent":["\nimport { useState, useEffect } from 'react'\nimport ResultElem from \"../components/resultelem\"\nfunction TabellineLog() {\n\n    const [results, setResults]=useState([])\n    const [currentquestion, setCurrentquestion]=useState([7,4])\n    const [currentanswer, setCurrentanswer]=useState(\"\")\n    \n    const handleSubmit=(event)=>{ \n        \n        setCurrentquestion([Math.floor(Math.random()*10),Math.floor(Math.random()*10)])\n        event.preventDefault()\n        addResults\n    } \n    const addResults=()=>{\n        if ((currentquestion[0]*currentquestion[1])===currentanswer) {\n            setResults((prevState)=>prevState.results.append('right'))\n        }\n        else {\n            setResults((prevState)=>prevState.results.append('wrong'))\n        }\n\n    }\nuseEffect (()=>{\n    //const testres=currentquestion[0]*currentquestion[1]\n    //((testres===currentanswer)? setResults(\"RIGHT\") : setResults(\"WRONG\")\n \n    },[currentanswer])\n\n    const handleChange=(event)=>{\n        setCurrentanswer(parseInt(event.target.value,10))\n    }\n    const displayLog = ()=>results.map((r)=>(<ResultElem text={r}/>))\n    \n    return (<div>\n                <h1>TABELLINE: {currentquestion[0]}X{currentquestion[1]}</h1>\n                <form onSubmit={handleSubmit}>\n                    <input name=\"currentanswer\" type=\"text\" onChange={handleChange}/>\n                    <button>ok</button>\n                 </form>\n                <div className=\"tabelline-log\">\n                xx{displayLog()}\n                </div>\n            </div>)\n}\n\n\nexport default TabellineLog\n"]},"metadata":{},"sourceType":"module"}