{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/gab/nextjs/components/tabellinelog.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport ResultElem from \"../components/resultelem\";\n\nfunction TabellineLog() {\n  var _useState = useState([]),\n      results = _useState[0],\n      setResults = _useState[1];\n\n  var _useState2 = useState([7, 4]),\n      currentquestion = _useState2[0],\n      setCurrentquestion = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      currentanswer = _useState3[0],\n      setCurrentanswer = _useState3[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    setCurrentquestion([Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)]);\n    event.preventDefault();\n    setCurrentanswer('');\n    addResults();\n  };\n\n  var addResults = function addResults() {\n    var a = currentquestion[0];\n    var b = currentquestion[1];\n\n    if (a * b === currentanswer) {\n      setResults(function (prevState) {\n        return [{\n          text: \"\".concat(a, \"x\").concat(b, \"=\").concat(currentanswer, \" {&#128526;}\"),\n          ok: true\n        }].concat(_toConsumableArray(prevState));\n      });\n    } else {\n      setResults(function (prevState) {\n        return [{\n          text: \"\".concat(a, \"x\").concat(b, \"=\").concat(currentanswer, \" &#128078;\"),\n          ok: false\n        }].concat(_toConsumableArray(prevState));\n      });\n    }\n  }; // useEffect (()=>{\n  //     },[currentanswer])\n\n\n  var handleChange = function handleChange(event) {\n    setCurrentanswer(_parseInt(event.target.value, 10));\n  };\n\n  var displayLog = function displayLog() {\n    return results.map(function (r) {\n      return __jsx(ResultElem, {\n        text: r.text,\n        ok: r.ok,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      });\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: \"tabelline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"TABELLINE: \", currentquestion[0], \"X\", currentquestion[1], \" \\uD83D\\uDC4E\"), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(\"form\", {\n    autocomplete: \"off\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    className: \"tabelline\",\n    autofocus: true,\n    name: \"currentanswer\",\n    value: currentanswer,\n    type: \"number\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"ok\")), __jsx(\"div\", {\n    className: \"tabelline-log\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, displayLog()));\n}\n\nexport default TabellineLog;","map":{"version":3,"sources":["/Users/gab/nextjs/components/tabellinelog.js"],"names":["useState","useEffect","ResultElem","TabellineLog","results","setResults","currentquestion","setCurrentquestion","currentanswer","setCurrentanswer","handleSubmit","event","Math","floor","random","preventDefault","addResults","a","b","prevState","text","ok","handleChange","target","value","displayLog","map","r"],"mappings":"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","sourcesContent":["\nimport { useState, useEffect } from 'react'\nimport ResultElem from \"../components/resultelem\"\nfunction TabellineLog() {\n\n    const [results, setResults]=useState([])\n    const [currentquestion, setCurrentquestion]=useState([7,4])\n    const [currentanswer, setCurrentanswer]=useState(\"\")\n    \n    const handleSubmit=(event)=>{ \n        \n        setCurrentquestion([Math.floor(Math.random()*10),Math.floor(Math.random()*10)])\n        event.preventDefault()\n        setCurrentanswer('')\n        addResults()\n    } \n    const addResults=()=>{\n        let a=currentquestion[0] \n        let b=currentquestion[1] \n       \n        if ((a*b)===currentanswer) {\n            setResults((prevState)=>([{text:`${a}x${b}=${currentanswer} {&#128526;}`,ok:true},...prevState]))\n        }\n        else {\n            setResults((prevState)=>([{text:`${a}x${b}=${currentanswer} &#128078;`,ok:false},...prevState]))\n        }\n\n    }\n// useEffect (()=>{\n\n \n//     },[currentanswer])\n\n    const handleChange=(event)=>{\n        setCurrentanswer(parseInt(event.target.value,10))\n    }\n    const displayLog = ()=>results.map((r)=>(<ResultElem text={r.text} ok={r.ok} />))\n    \n    return (<div className=\"tabelline\">\n                <span>TABELLINE: {currentquestion[0]}X{currentquestion[1]} &#128078;</span><br/>\n                <form autocomplete=\"off\"  onSubmit={handleSubmit}>\n                    <input className=\"tabelline\" autofocus name=\"currentanswer\"  value={currentanswer} type=\"number\" onChange={handleChange}/>\n                    <button>ok</button>\n                 </form>\n                <div className=\"tabelline-log\">\n                  {displayLog()}\n                </div>\n            </div>)\n}\n\n\nexport default TabellineLog\n"]},"metadata":{},"sourceType":"module"}