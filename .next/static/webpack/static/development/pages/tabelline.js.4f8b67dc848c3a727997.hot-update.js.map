{"version":3,"file":"static/webpack/static/development/pages/tabelline.js.4f8b67dc848c3a727997.hot-update.js","sources":["webpack:///./components/tabellinelog.js"],"sourcesContent":["\nimport { useState, useEffect } from 'react'\nimport ResultElem from \"../components/resultelem\"\nfunction TabellineLog() {\n\n    const [results, setResults]=useState([])\n    const [currentquestion, setCurrentquestion]=useState([7,4])\n    const [currentanswer, setCurrentanswer]=useState(\"\")\n    \n    const handleSubmit=(event)=>{ \n        \n        setCurrentquestion([Math.floor(Math.random()*10),Math.floor(Math.random()*10)])\n        event.preventDefault()\n        setCurrentanswer('')\n        addResults()\n    } \n    const addResults=()=>{\n        let a=currentquestion[0] \n        let b=currentquestion[1] \n       \n        if ((a*b)===currentanswer) {\n            setResults((prevState)=>([...prevState,{text:`${a}x${b}=${currentanswer} right`,ok:true}]))\n        }\n        else {\n            setResults((prevState)=>([...prevState,{text:`${a}x${b}=${currentanswer} wrong`,ok:false}]))\n        }\n\n    }\n// useEffect (()=>{\n\n \n//     },[currentanswer])\n\n    const handleChange=(event)=>{\n        setCurrentanswer(parseInt(event.target.value,10))\n    }\n    const displayLog = ()=>results.map((r)=>(<ResultElem text={r.text} ok={r.ok} />))\n    \n    return (<div>\n                <h1>TABELLINE: {currentquestion[0]}X{currentquestion[1]}</h1>\n                <form autocomplete=\"off\" autofocus=\"on\" onSubmit={handleSubmit}>\n                    <input name=\"currentanswer\" value={currentanswer} type=\"text\" onChange={handleChange}/>\n                    <button>ok</button>\n                 </form>\n                <div className=\"tabelline-log\">\n                  {displayLog()}\n                </div>\n            </div>)\n}\n\n\nexport default TabellineLog\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;;;;A","sourceRoot":""}